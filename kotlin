MainActivity----------------------------


import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.TextView

class MainActivity : AppCompatActivity() {

    private var tv_id: TextView? = null
    private var tv_pass: TextView? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tv_id = findViewById(R.id.tv_id)
        tv_pass = findViewById(R.id.tv_pass)

        val intent = getIntent()
        val id = intent.getStringExtra("id")
        val password = intent.getStringExtra("password")

        //아이디, 비밀번호 값 불러와 출력하기
        tv_id?.setText(id)
        tv_pass?.setText(password)
    }
    }


LoginActivity------------------------------------------


import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import com.android.volley.Response
import com.android.volley.toolbox.Volley
import org.json.JSONException
import org.json.JSONObject

class LoginActivity : AppCompatActivity() {

    private var et_id: EditText? = null
    private var et_pass: EditText? = null
    private var btn_login: Button? = null
    private var btn_register: Button? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_login)

        et_id = findViewById(R.id.et_id)
        et_pass = findViewById(R.id.et_pass)
        btn_login = findViewById(R.id.btn_login)
        btn_register = findViewById(R.id.btn_register)

        btn_register?.setOnClickListener(View.OnClickListener {
            val intent = Intent(this, RegisterActivity::class.java)
            startActivity(intent)
        })

        btn_login?.setOnClickListener(View.OnClickListener {

            val id = et_id?.getText().toString()
            val password = et_pass?.getText().toString()

                val responseListener = Response.Listener<String?> { response ->
                    try {
                        val jsonObject = JSONObject(response)
                        val success = jsonObject.getBoolean("success")

                        if (success) { //로그인 성공
                            Toast.makeText(applicationContext, "로그인에 성공하였습니다.", Toast.LENGTH_SHORT)
                                .show()
                            val intent = Intent(this@LoginActivity, MainActivity::class.java)
                            intent.putExtra("id", id)
                            intent.putExtra("password", password)
                            startActivity(intent)
                        } else { //로그인 실패
                            Toast.makeText(applicationContext, "로그인에 실패하였습니다.", Toast.LENGTH_SHORT)
                                .show()
                            return@Listener
                        }
                    } catch (e: JSONException) {
                        e.printStackTrace()
                    }
                }

            val loginRequest = LoginRequest(id, password, responseListener)
            val queue = Volley.newRequestQueue(this@LoginActivity)
            queue.add(loginRequest)

        })
    }
}

LoginRequest---------------------------------


import com.android.volley.AuthFailureError
import com.android.volley.Response
import com.android.volley.toolbox.StringRequest
import java.util.HashMap

class LoginRequest(id: String, password: String, listener: Response.Listener<String?>) :
    StringRequest(
        Method.POST, URL, listener, null
    ) {
        private val map: MutableMap<String, String>

    //private Map<String, String>parameters;
    init {
        map = HashMap()
        map["id"] = id
        map["password"] = password
    }

    @Throws(AuthFailureError::class)
    override fun getParams(): Map<String, String>? {
        return map
    }

    companion object {
        //서버 URL 설정(php 파일 연동)
        private const val URL = "http://주소/Login.php"
    }
}

RegisterActivity----------------------------


import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import com.android.volley.Response
import com.android.volley.toolbox.Volley
import kotlinx.android.synthetic.main.activity_register.*
import org.json.JSONException
import org.json.JSONObject

class RegisterActivity : AppCompatActivity() {

    private var et_id: EditText? = null
    private var et_pass: EditText? = null
    private var et_name: EditText? = null
    private var btn_register: Button? = null
    private var btn_idcheck: Button? = null
    private var validata: Boolean = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_register)

        //아이디 값 찾아주기
        et_id = findViewById(R.id.et_id)
        et_pass = findViewById(R.id.et_pass)
        et_name = findViewById(R.id.et_name)

        //아이디 중복체크 버튼 클릭 시 수행
        btn_idcheck = findViewById(R.id.btn_idcheck)
        btn_idcheck?.setOnClickListener(View.OnClickListener {

            //입력되어 있는 값을 get 해온다
            val id = et_id?.getText().toString()

            if (id == "") {
                val builder = AlertDialog.Builder(this@RegisterActivity)
                builder.setMessage("아이디를 적어주세요.")
                    .setPositiveButton("확인", null)
                    .create()
                builder.show()
            }

            val responseListener = Response.Listener<String?> { response ->

                try {
                    val jsonObject = JSONObject(response)

                    val success = jsonObject.getBoolean("success")

                    if (success) { //성공
                        Toast.makeText(applicationContext, "사용가능한 아이디입니다.", Toast.LENGTH_SHORT)
                            .show()
                        val intent = Intent(this@RegisterActivity, LoginActivity::class.java)
                        startActivity(intent)
                    } else {
                        Toast.makeText(applicationContext, "사용할 수 없는 아디이입니다.", Toast.LENGTH_SHORT)
                            .show()
                        return@Listener
                    }
                } catch (e: JSONException) {
                    e.printStackTrace()
                }
            }
        })

        //회원가입 버튼 클릭 시 수행
        btn_register = findViewById(R.id.btn_register)
        btn_register?.setOnClickListener(View.OnClickListener {

            //입력되어 있는 값을 get 해온다
            val id = et_id?.getText().toString()
            val password = et_pass?.getText().toString()
            val name = et_name?.getText().toString()

            if (!validata) {
                val builder = AlertDialog.Builder(this@RegisterActivity)
                builder.setMessage("아이디 중복체크를 해주세요.")
                    .setPositiveButton("확인", null)
                    .create()
                builder.show()
            }

            if (id == "" || password == "" || name == "") {
                val builder = AlertDialog.Builder(this@RegisterActivity)
                builder.setMessage("빈 칸 없이 입력해주세요.")
                    .setPositiveButton("확인", null)
                    .create()
                builder.show()
            }

            val responseListener = Response.Listener<String?> { response ->

                try {
                    val jsonObject = JSONObject(response)

                    val success = jsonObject.getBoolean("success")
                    if (success) { //성공
                        Toast.makeText(applicationContext, "회원등록에 성공하였습니다.", Toast.LENGTH_SHORT)
                            .show()
                        val intent = Intent(this@RegisterActivity, LoginActivity::class.java)
                        startActivity(intent)
                    } else {
                        Toast.makeText(applicationContext, "회원등록에 실패하였습니다.", Toast.LENGTH_SHORT)
                            .show()
                        return@Listener
                    }
                } catch (e: JSONException) {
                    e.printStackTrace()
                }
            }

            // 서버로 Volley를 이용해서 요청을 함.
            val registerRequest = RegisterRequest(id, password, name, responseListener)
            val queue = Volley.newRequestQueue(this@RegisterActivity)
            queue.add(registerRequest)

        })
    }
}

RegisterRequest----------------------------------------------------------


import com.android.volley.toolbox.StringRequest
import com.android.volley.AuthFailureError
import com.android.volley.Response
import java.util.HashMap

class RegisterRequest(id: String, password: String, name: String, listener: Response.Listener<String?>) :
    StringRequest(
        Method.POST, URL, listener, null
    ) {
        private val map: MutableMap<String, String>

        //private Map<String, String>parameters;
        init {
            map = HashMap()
            map["id"] = id
            map["password"] = password
            map["name"] = name
        }

        @Throws(AuthFailureError::class)
        override fun getParams(): Map<String, String>? {
            return map
        }

        companion object {
            //서버 URL 설정(php 파일 연동)
            private const val URL = "http://주소/Register.php"
        }
    }
    
usercheck----------------------------------------------------------
 
 
import com.android.volley.toolbox.StringRequest
import com.android.volley.AuthFailureError
import com.android.volley.Response
import java.util.HashMap

class usercheck (id: String, listener: Response.Listener<String?>) :
    StringRequest(Method.POST, URL, listener, null) {

    private val map: MutableMap<String, String>

    init {
        map = HashMap()
        map["id"] = id
    }

    @Throws(AuthFailureError::class)
    override fun getParams(): Map<String, String>? {
        return map
    }

    companion object {
        //서버 URL 설정(php 파일 연동)
        private const val URL = "http://주소/usercheck.php"
    }
}


Member---------------------------------------------------
@file:Suppress("DEPRECATION")

package com.example.choiduflix

import android.annotation.SuppressLint
import android.app.ProgressDialog
import android.content.Context
import android.net.ConnectivityManager
import android.os.AsyncTask
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import kotlinx.android.synthetic.main.fragment_searchresult.*
import kotlinx.android.synthetic.main.searchresult.*
import okhttp3.OkHttpClient
import okhttp3.Request


@Suppress("DEPRECATION")
class maintest : AppCompatActivity() {

    lateinit var context : Context

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.fragment_searchresult)
        context = this
        getQuestions().execute()
    }

    @Suppress("DEPRECATION")
    internal inner class getQuestions : AsyncTask<Void, Void, String>() {

        lateinit var progressDialog : ProgressDialog
        var hasInternet = false

        override fun onPreExecute() {
            super.onPreExecute()
            progressDialog = ProgressDialog(context)
            progressDialog.setMessage("Downloading Questions...")
            progressDialog.setCancelable(false)
            progressDialog.show()
        }

        override fun doInBackground(vararg params: Void?): String {
            if(isNetworkAvailable()) {
                hasInternet = true
                val client = OkHttpClient()
                val url = "http://juhee3297.cafe24.com/member.php"
                val request = Request.Builder().url(url).build()
                val response = client.newCall(request).execute()
                return response.body?.string().toString()
            }else
            {
                return ""
            }
        }

        override fun onPostExecute(result: String?) {
            super.onPostExecute(result)
            progressDialog.dismiss()

            if(hasInternet) {
                tv_result.text = result
            }else
                tv_result.text = "No Internet"
        }

    }

    private fun isNetworkAvailable(): Boolean {
        val connectivityManager = getSystemService(CONNECTIVITY_SERVICE) as ConnectivityManager
        val activeNetworkInfo = connectivityManager.activeNetworkInfo
        return activeNetworkInfo != null && activeNetworkInfo.isConnected
    }
}

searchresultActivity------------------------------------------------------

@file:Suppress("DEPRECATION")

package com.example.choiduflix

import android.app.ProgressDialog
import android.content.Context
import android.net.ConnectivityManager
import android.os.AsyncTask
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.fragment_searchresult.*
import okhttp3.OkHttpClient
import okhttp3.Request


@Suppress("DEPRECATION")
class maintest : Fragment() {

    private var recyclerview: RecyclerView? = null
//    private var adapter: ContentsListAdapter? = null
//    private var contentsList: MutableList<Contents>? = null
    lateinit var contentsAdapter: ContentsListAdapter
    val datas = mutableListOf<Contents>()

//    lateinit var contentsrecyclerview: RecyclerView
//    private lateinit var ContentsArrayList : ArrayList<Contents>
//    private var contentsdata = ArrayList<Contents>()
//    lateinit var title : Array<String>
//    lateinit var contype : Array<String>
//    private var search: String? = null


    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_searchresult, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        recyclerview?.layoutManager = LinearLayoutManager(context)
        recyclerview?.adapter = contentsAdapter

        GetQuestionsTask().execute()
    }

    inner class GetQuestionsTask : AsyncTask<Void, Void, String>() {

        private lateinit var progressDialog: ProgressDialog
        private var hasInternet = false

        override fun onPreExecute() {
            super.onPreExecute()
            progressDialog = ProgressDialog(context)
            progressDialog.setMessage("Downloading Questions...")
            progressDialog.setCancelable(false)
            progressDialog.show()
        }

        override fun doInBackground(vararg params: Void?): String {
            if (isNetworkAvailable()) {
                hasInternet = true
                val client = OkHttpClient()
                val url = "http://서버/contents.php"
                val request = Request.Builder().url(url).build()
                val response = client.newCall(request).execute()
                return response.body?.string().toString()
            } else {
                return ""
            }
        }

        override fun onPostExecute(result: String?) {
            super.onPostExecute(result)
            progressDialog.dismiss()


            if(hasInternet) {
                val contents = Contents(result?: "", result?: "",result?: "")
                datas.add(contents)

                // 어댑터에 데이터 변경을 알림
                contentsAdapter.datas = datas
                contentsAdapter.notifyDataSetChanged()

            }
            }
        }

    private fun isNetworkAvailable(): Boolean {
        val connectivityManager =
            requireContext().getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val activeNetworkInfo = connectivityManager.activeNetworkInfo
        return activeNetworkInfo != null && activeNetworkInfo.isConnected
    }
}

list 출력----------------------
 class maintest : Fragment() {

            private lateinit var listView: ListView
            private lateinit var adapter: ContentsListAdapter
            private lateinit var contentsList: MutableList<Contents>

            override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
                val view = inflater.inflate(R.layout.fragment_search, container, false)
                listView = view.findViewById(R.id.listView)
                return view
            }

            override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
                super.onViewCreated(view, savedInstanceState)
                contentsList = ArrayList()
                contentsList.add(Contents("알라딘", "영화", "모험"))
                contentsList.add(Contents("미녀와 야수", "영화", "애니"))
                adapter = ContentsListAdapter(requireContext(), contentsList)
                listView.adapter = adapter
            }
        }
       
 ContentsListAdapter---------------------------
   class ContentsListAdapter(private val context: Context, private val contentsList: List<Contents>) : BaseAdapter() {

    override fun getCount(): Int {
        return contentsList.size
    }

    override fun getItem(i: Int): Any {
        return contentsList[i]
    }

    override fun getItemId(i: Int): Long {
        return i.toLong()
    }

    override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {
        val v = View.inflate(context, R.layout.contents, null)
        val title = v.findViewById<TextView>(R.id.title)
        val contype = v.findViewById<TextView>(R.id.contype)
        val genre = v.findViewById<TextView>(R.id.genre)

        title.text = contentsList[i].title
        contype.text = contentsList[i].contype
        genre.text = contentsList[i].genre

        v.tag = contentsList[i].title
        return v
    }
}
